;
;
;     Program written by Robert Livingston, 2015
;
;     QTSETWHEELANG updates the wheel angle of all the nested wheel blocks based on their position in a block to the turn angle of the block
;
;
(defun QT:SETWHEELANG (C QTVLIST PLIST / ANG DIRECTION NEWWHEELANG NODE P0 P1 P2 PC R)
 (defun NEWWHEELANG (NODE ANG / A ANG2 D D0 DG DH ENT ENT2 ENT3 ENTLIST LOCKANG P SCALE TAN TOL WF WR X Y)
  (setq TOL 0.000001)
  (defun TAN (ANG)
   (/ (sin ANG) (cos ANG))
  )
  (setq ENT (last NODE))
  (setq ENTLIST (entget ENT))
  (if (= "INSERT" (cdr (assoc 0 ENTLIST)))
   (progn
    (setq SCALE (cdr (assoc 41 ENTLIST)))
    (setq ENTLIST (tblsearch "BLOCK" (cdr (assoc 2 ENTLIST))))
    (setq ENT2 (cdr (assoc -2 ENTLIST)))
    (while (/= nil ENT2)
     (setq ENTLIST (entget ENT2))
     (if (= "INSERT" (cdr (assoc 0 ENTLIST)))
      (progn
       (if (< (abs ANG) TOL)
        (setq ANG2 ANG)
        (progn
         (setq P (cdr (assoc 10 ENTLIST)))
         (setq X (* (car P) SCALE))
         (setq Y (* (cadr P) SCALE))
         (setq D0 nil DG nil D nil DH nil LA nil LB nil LOCKANG nil WF nil WR nil STEP nil)
         (setq TMP (QT:GETD (car NODE)))
         (setq D0 (nth 0 TMP)
               DG (nth 1 TMP)
               D (nth 2 TMP)
               DH (nth 3 TMP)
               LOCKANG (nth 4 TMP)
               WF (nth 7 TMP)
               WR (nth 8 TMP)
         )
         (setq A (/ (- D D0) (TAN ANG)))
         (setq ANG2 (atan (/ (- D X) (+ A Y))))
        )
       )
       (setq ENTLIST (subst (cons 50 ANG2) (assoc 50 ENTLIST) ENTLIST))
       (entmod ENTLIST)
       (entupd ENT)
      )
     )
     (setq ENT2 (entnext ENT2))
    )
   )
  )
 )
 (foreach NODE QTVLIST
  (if (or (= C CMAX) (= nil PLIST))
   (NEWWHEELANG NODE 0.0)
   (progn
    (if (= C 0)
     (setq P0 nil P1 (nth C PLIST) P2 (nth (+ C 1) PLIST))
     (if (= C CMAX)
      (setq P0 (nth (- C 1) PLIST) P1 (nth C PLIST) P2 nil)
      (progn
       (setq P0 (nth (- C 1) PLIST) P1 (nth C PLIST) P2 (nth (+ C 1) PLIST))
       (setq PC (CIRCLE3P P0 P1 P2))
       (if (= PC nil)
        (setq P0 nil)
        (progn
         (setq R (cadr PC))
         (setq PC (car PC))
         (setq ANG (angle P1 PC))
         (if (> (sin (- (angle P2 PC) (angle P1 PC))) 0.0)
          (setq ANG (- ANG (/ pi 2.0)))
          (setq ANG (+ ANG (/ pi 2.0)))
         )
         (setq P2 (list (+ (car P1) (* R (cos ANG)))
                        (+ (cadr P1) (* R (sin ANG)))))
        )
       )
      )
     )
    )	
    (setq ANG (nth C (cadr NODE)))
    (setq ANG (- ANG (angle P2 P1)))
    (while (< ANG 0.0)
     (setq ANG (+ ANG (* 2.0 pi)))
    )
    (while (>= ANG (* 2.0 pi))
     (setq ANG (- ANG (* 2.0 pi)))
    )
    (NEWWHEELANG NODE (* -1.0 ANG))
    (setq PLIST (cadddr NODE))
   )
  )
 )
)
